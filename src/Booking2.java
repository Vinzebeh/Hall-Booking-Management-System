/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import java.awt.Window;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.Random;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author ASUS
 */
public class Booking2 extends javax.swing.JPanel {

    private String fullRoomName; 
    private String selectedHall;
    private String startTime;
    private String endTime;
    private static final String FILE_PATH = "Booking.txt";
    private String UserID;
    private String UserName;

    /**
     * Creates new form Booking2
     */
    public Booking2(String UserID, String UserName) {
        this.UserID = UserID;
        this.UserName = UserName;
        initComponents();
    }
    
        public void readBookingInfo() {
            try (BufferedReader br = new BufferedReader(new FileReader(FILE_PATH))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] bookingData = line.split(";");

                    String hallType = bookingData[1]; 
                    String bookDate = bookingData[3];  
                    String startTime = bookingData[4];  
                    String endTime = bookingData[5]; 
                    String status = bookingData[12];

                    System.out.println("Hall Type: " + hallType);
                    System.out.println("Date: " + bookDate);
                    System.out.println("Start Time: " + startTime);
                    System.out.println("End Time: " + endTime);
                    System.out.println("Status: " + status);
              }
            } catch (IOException e) {
                e.printStackTrace(); 
            }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        StartTimeChoose = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        EndTimeChoose = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        HallChoose = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        RoomChoose = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        NumPersonTxt = new javax.swing.JTextField();
        DateChoose = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        discountcodeText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ProceedBtn = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TotalPrice = new javax.swing.JLabel();
        Hours = new javax.swing.JLabel();
        HallPrice = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        discountLabel = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Please Choose Your Date and Time");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Start Date :");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Start Time :");

        StartTimeChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00" }));
        StartTimeChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartTimeChooseActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("End Time :");

        EndTimeChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00" }));
        EndTimeChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndTimeChooseActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Please Choose Your Hall :");

        HallChoose.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        HallChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "==Selected A Hall==", "Auditorium", "Banquet Hall", "Meeting Room" }));
        HallChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HallChooseActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Room :");

        RoomChoose.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        RoomChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        RoomChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomChooseActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Number Of Person :");

        DateChoose.setDateFormatString("yyyy/M/d");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Discount Code:");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HallChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(discountcodeText, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton1))
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(DateChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(18, 18, 18)
                                            .addComponent(NumPersonTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(StartTimeChoose, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(24, 24, 24)
                                                    .addComponent(RoomChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addComponent(EndTimeChoose, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(HallChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartTimeChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(EndTimeChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(RoomChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(NumPersonTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountcodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(0, 0, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setForeground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setText("Book A Hall");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(263, 263, 263))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        ProceedBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ProceedBtn.setText("Proceed To Payment");
        ProceedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedBtnActionPerformed(evt);
            }
        });

        CancelBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Hall Price Per Hour :");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("X");

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel17.setText("Total Price:");

        TotalPrice.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TotalPrice.setText("Total");

        Hours.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Hours.setText("Hours");

        HallPrice.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        HallPrice.setText("Price");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel9.setText("Price With Discount:");

        discountLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(310, 310, 310))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TotalPrice))
                            .addComponent(jLabel11)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HallPrice)
                            .addComponent(Hours)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(HallPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(Hours)
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(TotalPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(discountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(ProceedBtn)
                        .addGap(151, 151, 151)
                        .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProceedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void HallChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HallChooseActionPerformed
        selectedHall = (String) HallChoose.getSelectedItem();
        updateHallPrice(); 
        updateRoomName(); 
        if (startTime != null && endTime != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");

            LocalTime start = LocalTime.parse(startTime, formatter);
            LocalTime end = LocalTime.parse(endTime, formatter);
            long minutes = ChronoUnit.MINUTES.between(start, end);
            long hours = minutes / 60;
            long remainingMinutes = minutes % 60;
            double totalPrice = updateTotalPrice(hours,remainingMinutes);
            if (discountcodeText.getText().equals("NICEHALL")){
                double discountPrice = totalPrice * 80 / 100;
                discountLabel.setText("RM" + String.format("%.2f", discountPrice));
            }
        }
    }//GEN-LAST:event_HallChooseActionPerformed

    private void RoomChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomChooseActionPerformed
        updateRoomName();
    }//GEN-LAST:event_RoomChooseActionPerformed

    private boolean validateNumPerson(String selectedHall, int numPerson) {
        switch (selectedHall) {
            case "Auditorium":
                if (numPerson > 1000) {
                    JOptionPane.showMessageDialog(null, "Auditorium can only accommodate up to 1000 people.");
                    return false;
                }
                break;
            case "Banquet Hall":
                if (numPerson > 300) {
                    JOptionPane.showMessageDialog(null, "Banquet Hall can only accommodate up to 300 people.");
                    return false;
                }
                break;
            case "Meeting Room":
                if (numPerson > 30) {
                    JOptionPane.showMessageDialog(null, "Meeting Room can only accommodate up to 30 people.");
                    return false;
                }
                break;
            default:
                return false;
        }
        return true;
    }
    
    private void ProceedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedBtnActionPerformed
        String selectedHall = (String) HallChoose.getSelectedItem();
        String selectedRoom = fullRoomName;
        String bookDate = ((JTextField) DateChoose.getDateEditor().getUiComponent()).getText();
        String newStartTime = (String) StartTimeChoose.getSelectedItem();
        String newEndTime = (String) EndTimeChoose.getSelectedItem();
        String numPersonStr = NumPersonTxt.getText();
        try {
            int numPerson = Integer.parseInt(numPersonStr);
            if (!validateNumPerson(selectedHall, numPerson)) {
                int result = JOptionPane.showConfirmDialog(null, "Too many people. Would you like to consider changing the hall type?", "Exceeds Capacity", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    HallChoose.setSelectedIndex(0);
                    RoomChoose.setSelectedIndex(0);
                    DateChoose.setCalendar(null);
                    StartTimeChoose.setSelectedIndex(0);
                    EndTimeChoose.setSelectedIndex(0);
                    NumPersonTxt.setText("");
                    TotalPrice.setText("RM 0.00");
                    JOptionPane.showMessageDialog(null, "Please reselect the hall type and re-enter the information.");
                } else {
                    JOptionPane.showMessageDialog(null, "Sorry, the selected hall cannot accommodate the specified number of people.");
                }
                return;
            }

            if (isMaintenancePeriod(selectedHall, selectedRoom, bookDate)) {
                JOptionPane.showMessageDialog(null, "The selected room is under maintenance during the chosen date. Please select another room or date.");
                return;
            }


            String amount = TotalPrice.getText();
            
            String bookingID = generateBookingID();  
            LocalTime currentTime = LocalTime.now();
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
            String formattedCurrentTime = currentTime.format(timeFormatter);
            LocalDate currentDate = LocalDate.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/M/d");
            String formattedCurrentDate = currentDate.format(dateFormatter);
            if (!TimeSlotAvailable(selectedRoom, selectedHall, bookDate, newStartTime, newEndTime)) {
                JOptionPane.showMessageDialog(null, "The selected time slot is already booked. Please choose another room or time.");
            } else {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_PATH, true))) {
                    String bookingData = String.join(";",
                        UserID,
                        selectedHall,
                        selectedRoom,
                        bookDate,
                        newStartTime,
                        newEndTime,
                        numPersonStr,
                        bookingID,
                        amount,
                        formattedCurrentDate,
                        formattedCurrentTime,
                        "Proceed"
                    );
                    bw.write(bookingData);
                    bw.newLine();
                    JOptionPane.showMessageDialog(null, "Booking has been successfully saved!");
                    javax.swing.JFrame bookingFrame = (javax.swing.JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);
                    bookingFrame.setVisible(false);

                    Payment paymentFrame = new Payment(UserID, UserName, amount, bookingID, this); 
                    paymentFrame.setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error saving booking data. Please try again.");
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid number of persons.");
        }
        
    }//GEN-LAST:event_ProceedBtnActionPerformed

    private void StartTimeChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartTimeChooseActionPerformed
        startTime = (String) StartTimeChoose.getSelectedItem();
        if (HallChoose.getSelectedItem().equals("==Select A Hall==")) {
            HallPrice.setText("RM 0.00");
        }
    }//GEN-LAST:event_StartTimeChooseActionPerformed

    private void EndTimeChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndTimeChooseActionPerformed
        endTime = (String) EndTimeChoose.getSelectedItem();
        if (HallChoose.getSelectedItem().equals("==Select A Hall==")) {
            HallPrice.setText("RM 0.00");
        }
        if (startTime != null && endTime != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            LocalTime start = LocalTime.parse(startTime, formatter);
            LocalTime end = LocalTime.parse(endTime, formatter);
            long minutes = ChronoUnit.MINUTES.between(start, end);
            long hours = minutes / 60;
            long remainingMinutes = minutes % 60;
            if (remainingMinutes == 0) {
                Hours.setText("Hours: " + hours);
            } else {
                Hours.setText("Hours:  " + hours + " : " + remainingMinutes + " minutes");
            }
            double totalPrice = updateTotalPrice(hours,remainingMinutes);
            if (discountcodeText.getText().equals("NICEHALL")){
                double discountPrice = totalPrice * 80 / 100;
                discountLabel.setText("RM" + String.format("%.2f", discountPrice));
            }
        }
    }//GEN-LAST:event_EndTimeChooseActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            Window window = SwingUtilities.getWindowAncestor(this);
            if (window != null) {
                window.dispose();
            }
            Main mainPage = new Main(UserID, UserName); 
            mainPage.setVisible(true); 
        }
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalTime start = LocalTime.parse(startTime, formatter);
        LocalTime end = LocalTime.parse(endTime, formatter);
        long minutes = ChronoUnit.MINUTES.between(start, end);
        long hours = minutes / 60;
        long remainingMinutes = minutes % 60;
        double totalPrice = updateTotalPrice(hours,remainingMinutes);
        if (discountcodeText.getText().equals("NICEHALL")){
            double discountPrice = totalPrice * 80 / 100;
            discountLabel.setText("RM " + String.format("%.2f", discountPrice));
        }
    }//GEN-LAST:event_jButton1ActionPerformed
   
    private void updateHallPrice() {                                           
        String price = ""; 
        if (selectedHall != null) { 
            switch (selectedHall) {
                case "==Selected A Hall==":
                    price = "RM 0.00";
                    break;
                case "Auditorium":
                    price = "RM 300.00";
                    break;
                case "Banquet Hall":
                    price = "RM 100.00";
                    break;
                case "Meeting Room":
                    price = "RM 50.00";
                    break;
                default:
                    price = "Price not available";
            }
        } else {
            price = "Please select a hall first.";
        }
        HallPrice.setText(price);
    }
   
    private double updateTotalPrice(long hours, long minutes) {
        double totalPrice = 0;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        if (startTime != null && endTime != null) {
            LocalTime start = LocalTime.parse(startTime, formatter);
            LocalTime end = LocalTime.parse(endTime, formatter);
            if (end.isBefore(start)) {
                JOptionPane.showMessageDialog(null, "End time cannot be earlier than start time.");
            }
        }
        String priceText = HallPrice.getText();
        if (!priceText.isEmpty()) {
            double hallPrice = Double.parseDouble(priceText.replace("RM ", ""));
            double totalHours = hours + (minutes / 60.0);
            totalPrice = hallPrice * totalHours;
            if (discountcodeText.getText().equals("NICEHALL")){
                double discountPrice = totalPrice * 80 / 100;
                discountLabel.setText("RM" + String.format("%.2f", discountPrice));
            }
            
            TotalPrice.setText("RM " + String.format("%.2f", totalPrice));
        } else {
            TotalPrice.setText("Price not available");
        }
        return totalPrice;
    }
    
    public boolean TimeSlotAvailable(String selectedRoom, String selectedHall, String bookDate, String newStartTime, String newEndTime) {
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        try (BufferedReader br = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] bookingData = line.split(";");
                
                if (bookingData.length >= 12) {
                    String bookedRoom = bookingData[2];
                    String bookedHall = bookingData[1];
                    String bookedDate = bookingData[3]; 
                    String bookedStartTime = bookingData[4]; 
                    String bookedEndTime = bookingData[5];
                    String status = bookingData[11];
                    
                    if (status.equalsIgnoreCase("Proceed") && bookedRoom.equals(selectedRoom) && bookedHall.equals(selectedHall) && bookedDate.equals(bookDate)) {
                        LocalTime newStart = LocalTime.parse(newStartTime, timeFormatter);
                        LocalTime newEnd = LocalTime.parse(newEndTime, timeFormatter);
                        LocalTime bookedStart = LocalTime.parse(bookedStartTime, timeFormatter);
                        LocalTime bookedEnd = LocalTime.parse(bookedEndTime, timeFormatter);
                        
                        if ((newStart.isBefore(bookedEnd) && newEnd.isAfter(bookedStart))) {
                            return false; 
                        }
                    }
                } else {
                    System.out.println("Booking data format error: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }
    
    private boolean isMaintenancePeriod(String selectedHall, String selectedRoom, String bookDate) {
        try (BufferedReader br = new BufferedReader(new FileReader("hall_booking.txt"))) {
            String line;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/M/d"); 
            LocalDate bookingDate = LocalDate.parse(bookDate, formatter);

            while ((line = br.readLine()) != null) {
                String[] maintenanceData = line.split(";");
                System.out.println(maintenanceData[3]);
                if (maintenanceData[0].equals("Hall Type")) {
                    continue;
                }

                String hallType = maintenanceData[0];
                String roomName = maintenanceData[1];
                String status = maintenanceData[2];
                String startDateStr = maintenanceData[3];
                String endDateStr = maintenanceData[4];

                if (startDateStr.isEmpty() || endDateStr.isEmpty()) {
                System.out.println("Missing date: " + line); // Debug message for missing dates
                continue;
                }
                
                if (isValidDateFormat(startDateStr, formatter) && isValidDateFormat(endDateStr, formatter)){
                    LocalDate startDate = LocalDate.parse(startDateStr, formatter);
                    LocalDate endDate = LocalDate.parse(endDateStr, formatter);

                    if (hallType.equals(selectedHall) && roomName.equals(selectedRoom) && status.equals("Unavailable")) {
                        if (!bookingDate.isBefore(startDate) && !bookingDate.isAfter(endDate)) {
                            return true; 
                        }
                    }
                }
            }
        } catch (IOException | DateTimeParseException e) {
            e.printStackTrace();
        }
        return false; 
    }
    
    private boolean isValidDateFormat(String dateStr, DateTimeFormatter formatter){
        try{
            LocalDate.parse(dateStr, formatter);
            return true;
        }catch (DateTimeParseException e){
            return false;
        }
    }
    
    private String generateBookingID() {
        Random random = new Random();
        int randomNum = 1000 + random.nextInt(9000);
        return "BK" + randomNum;
    }
    
    private void updateRoomName() {
        String selectedRoom = (String) RoomChoose.getSelectedItem();
        String selectedHall = (String) HallChoose.getSelectedItem();

        if (selectedHall.equals("Auditorium")) {
            fullRoomName = "Audi " + selectedRoom;
        } else if (selectedHall.equals("Banquet Hall")) {
            fullRoomName = "Banquet Hall " + selectedRoom;
        } else if (selectedHall.equals("Meeting Room")) {
            fullRoomName = "Meet " + selectedRoom;
        } else {
            fullRoomName = "Unknown";
        }
        System.out.println("Selected Room: " + fullRoomName);
    }
    
    public static void main(String[] args) {
        String UserID = "";
        String UserName = "";
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Booking2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                javax.swing.JFrame frame = new javax.swing.JFrame();
                frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                frame.setContentPane(new Booking2(UserID,UserName));
                frame.pack(); 
                frame.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBtn;
    private com.toedter.calendar.JDateChooser DateChoose;
    private javax.swing.JComboBox<String> EndTimeChoose;
    private javax.swing.JComboBox<String> HallChoose;
    private javax.swing.JLabel HallPrice;
    private javax.swing.JLabel Hours;
    private javax.swing.JTextField NumPersonTxt;
    private javax.swing.JButton ProceedBtn;
    private javax.swing.JComboBox<String> RoomChoose;
    private javax.swing.JComboBox<String> StartTimeChoose;
    private javax.swing.JLabel TotalPrice;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountcodeText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
